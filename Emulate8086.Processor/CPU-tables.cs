using Emulate8086.Processor;
using static System.Formats.Asn1.AsnWriter;
using static System.Net.Mime.MediaTypeNames;
using System.Collections.Generic;
using System.Net;
using System.Reflection.Metadata;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using static Emulate8086.Processor.Instruction;
using static Emulate8086.Processor.CPU.TableFlags;

namespace Emulate8086.Processor
{
    public partial class CPU
    {
        // 16x16 matrix 0h-Fh x 0h-Fh
        // References 8088 Instruction Set Matrix, p. B-16
        // 8088 Instruction Reference, Technical Reference;
        // IBM Personal Computer XT Hardware Refernce Library, 1983
        private static readonly Instruction[,] instructionMatrix =
        {
            { ADD, ADD, ADD, ADD, ADD, ADD, PUSH, POP, OR, OR, OR, OR, OR, OR, PUSH, None }, // 09 being blank in IBM ref is a typo
            { ADC, ADC, ADC, ADC, ADC, ADC, PUSH, POP, SBB, SBB, SBB, SBB, SBB, SBB, PUSH, POP },
            { AND, AND, AND, AND, AND, AND, ESPrefix, DAA, SUB, SUB, SUB, SUB, SUB, SUB, CSPrefix, DAS },
            { XOR, XOR, XOR, XOR, XOR, XOR, SSPrefix, AAA, CMP, CMP, CMP, CMP, CMP, CMP, DSPrefix, AAS },
            { INC, INC, INC, INC, INC, INC, INC, INC, DEC, DEC, DEC, DEC, DEC, DEC, DEC, DEC },
            { PUSH, PUSH, PUSH, PUSH, PUSH, PUSH, PUSH, PUSH, POP, POP, POP, POP, POP, POP, POP, POP },
            { None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None },
            { JO, JNO, JB, JNB, JE, JNE, JBE, JNBE, JS, JNS, JP, JNP, JL, JNL, JLE, JNLE },
            { Immediate, Immediate, Immediate, Immediate, TEST, TEST, XCHG, XCHG, MOV, MOV, MOV, MOV, MOV, LEA, MOV, POP },
            { NOP, XCHG, XCHG, XCHG, XCHG, XCHG, XCHG, XCHG, CBW, CWD, CALL, WAIT, PUSHF, POPF, SAHF, LAHF },
            { MOV, MOV, MOV, MOV, MOVS, MOVS, CMPS, CMPS, TEST, TEST, STOS, STOS, LODS, LODS, SCAS, SCAS },
            { MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV },
            { None, None, RET, RET, LES, LDS, MOV, MOV, None, None, RET, RET, INT, INT, INTO, IRET },
            { Shift, Shift, Shift, Shift, AAM, AAD, None, XLAT, ESC, ESC, ESC, ESC, ESC, ESC, ESC, ESC },
            { LOOPNZ, LOOPZ, LOOP, JCXZ, IN, IN, OUT, OUT, CALL, JMP, JMP, JMP, IN, IN, OUT, OUT },
            { LOCK, None, REP, REP, HLT, CMC, Group1, Group1, CLC, STC, CLI, STI, CLD, STD, Group2, Group2 }
        };
        private static readonly TableFlags[,] flagsMatrix =
        {
            { b|f|rm, w|f|rm, b|t|rm, w|t|rm, b|ia, w|ia, _, _, b|f|rm, w|f|rm, b|t|rm, w|t|rm, b|i, w|i, _, _ },
            { b|f|rm, w|f|rm, b|t|rm, w|t|rm, b|i, w|i, _, _,   b|f|rm, w|f|rm, b|t|rm, w|t|rm, b|i, w|i, _, _ },
            { b|f|rm, w|f|rm, b|t|rm, w|t|rm, b|i, w|i, _, _, b|f|rm, w|f|rm, b|t|rm, w|t|rm, b|i, w|i, _, _ },
            { b|f|rm, w|f|rm, b|t|rm, w|t|rm, b|i, w|i, _, _, b|f|rm, w|f|rm, b|t|rm, w|t|rm, b|i, w|i, _, _ },
            { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ },
            { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ },
            { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ },
            { _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _ },
            { b|rm, w|rm, b|rm, @is|rm, b|rm, w|rm, b|rm, w|rm, b|f|rm, w|f|rm, b|t|rm, w|t|rm, sr|t|rm, _, sr|f|rm, rm},
            { _, _, _, _, _, _, _, _, _, _, l|d, _, _, _, _, _, },
            { m, m, m, m, b, w, b, w, b|i, w|i, b, w, b, w, b, w },
            { i, i, i, i, i, i, i, i, i, i, i, i, i, i, i, i },
            { _, _, i, _, _, _, b|i|rm, w|i|rm, _, _, l|i, l, _, _, _, _ },
            { b, w, b|v, w|v, _, _, _, _, _, _, _, _, _, _, _, _ },
            { _, _, _, _, b, w, b, w, d, d, l|d, TableFlags.si|d, v|b, v|w, v|b, v|w },
            { _, _, _, z, _, _, b|rm, w|rm, _, _, _, _, _, _, b|rm, w|rm },
        };
        [Flags]
        public enum TableFlags : ushort
        {
            _ = 0,
            b = 1 << 0,
            d = 1 << 1,
            f = 1 << 2,
            i = 1 << 3,
            ia = 1 << 4,
            id = 1 << 5,
            @is = 1 << 6,
            l = 1 << 7,
            m = 1 << 8,
            rm = 1 << 9,
            si = 1 << 10,
            sr = 1 << 11,
            t = 1 << 12,
            v = 1 << 13,
            w = 1 << 14,
            z = 1 << 15,
        }
        private readonly Dictionary<Instruction, Action<CPU>> instructionImpls =
            new Dictionary<Instruction, Action<CPU>>()
            {
                { None, HandleNone },
                { Immediate, HandleImmediateGroup },
                { Shift, HandleShiftGroup },
                { Group1, HandleGroup1 },
                { Group2, HandleGroup2 },
                { ESPrefix, HandleESPrefix },
                { CSPrefix, HandleCSPrefix },
                { SSPrefix, HandleSSPrefix },
                { DSPrefix, HandleDSPrefix },
                { AAA, HandleAAA },
                { AAD, HandleAAD },
                { AAM, HandleAAM },
                { AAS, HandleAAS },
                { ADC, HandleADC },
                { ADD, HandleADD },
                { AND, HandleAND },
                { CALL, HandleCALL },
                { CBW, HandleCBW },
                { CLC, HandleCLC },
                { CLD, HandleCLD },
                { CLI, HandleCLI },
                { CMC, HandleCMC },
                { CMP, HandleCMP },
                { CMPS, HandleCMPS },
                { CWD, HandleCWD },
                { DAA, HandleDAA },
                { DAS, HandleDAS },
                { DEC, HandleDEC },
                { DIV, HandleDIV },
                { ESC, HandleESC },
                { HLT, HandleHLT },
                { IDIV, HandleIDIV },
                { IMUL, HandleIMUL },
                { IN, HandleIN },
                { INC, HandleINC },
                { INT, HandleINT },
                { INTO, HandleINTO },
                { IRET, HandleIRET },
                { JA, HandleJA },
                { JAE, HandleJAE },
                { JB, HandleJB },
                { JBE, HandleJBE },
                { JC, HandleJC },
                { JCXZ, HandleJCXZ },
                { JE, HandleJE },
                { JG, HandleJG },
                { JGE, HandleJGE },
                { JL, HandleJL },
                { JLE, HandleJLE },
                { JMP, HandleJMP },
                { JNA, HandleJNA },
                { JNAE, HandleJNAE },
                { JNB, HandleJNB },
                { JNC, HandleJNC },
                { JNBE, HandleJNBE },
                { JNE, HandleJNE },
                { JNG, HandleJNG },
                { JNGE, HandleJNGE },
                { JNL, HandleJNL },
                { JNLE, HandleJNLE },
                { JNO, HandleJNO },
                { JNP, HandleJNP },
                { JNS, HandleJNS },
                { JNZ, HandleJNZ },
                { JO, HandleJO },
                { JP, HandleJP },
                { JPE, HandleJPE },
                { JPO, HandleJPO },
                { JS, HandleJS },
                { JZ, HandleJZ },
                { LAHF, HandleLAHF },
                { LDS, HandleLDS },
                { LEA, HandleLEA },
                { LES, HandleLES },
                { LOCK, HandleLOCK },
                { LODS, HandleLODS },
                { LOOP, HandleLOOP },
                { LOOPE, HandleLOOPE },
                { LOOPNE, HandleLOOPNE },
                { LOOPNZ, HandleLOOPNZ },
                { LOOPZ, HandleLOOPZ },
                { MOV, HandleMOV },
                { MOVSB, HandleMOVSB },
                { MOVSW, HandleMOVSW },
                { MOVS, HandleMOVS },
                { MUL, HandleMUL },
                { NEG, HandleNEG },
                { NOP, HandleNOP },
                { NOT, HandleNOT },
                { OR, HandleOR },
                { OUT, HandleOUT },
                { POP, HandlePOP },
                { POPF, HandlePOPF },
                { PUSH, HandlePUSH },
                { PUSHF, HandlePUSHF },
                { RCL, HandleRCL },
                { RCR, HandleRCR },
                { REP, HandleREP },
                { REPE, HandleREPE },
                { REPZ, HandleREPZ },
                { REPNE, HandleREPNE },
                { REPNZ, HandleREPNZ },
                { RET, HandleRET },
                { ROL, HandleROL },
                { ROR, HandleROR },
                { SAHF, HandleSAHF },
                { SAL, HandleSHL_SAL },
                { SAR, HandleSAR },
                { SBB, HandleSBB },
                { SCAS, HandleSCAS },
                { SHL, HandleSHL_SAL },
                { SHR, HandleSHR },
                { STC, HandleSTC },
                { STD, HandleSTD },
                { STI, HandleSTI },
                { STOS, HandleSTOS },
                { SUB, HandleSUB },
                { TEST, HandleTEST },
                { WAIT, HandleWAIT },
                { XCHG, HandleXCHG },
                { XLAT, HandleXLAT },
                { XOR, HandleXOR },
            };
    }
}