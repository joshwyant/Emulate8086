using Emulate8086.Processor;
using static System.Formats.Asn1.AsnWriter;
using static System.Net.Mime.MediaTypeNames;
using System.Collections.Generic;
using System.Net;
using System.Reflection.Metadata;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using static Emulate8086.Processor.Instruction;

namespace Emulate8086.Processor
{
    public partial class CPU
    {
        // 16x16 matrix 0h-Fh x 0h-Fh
        // References 8088 Instruction Set Matrix, p. B-16
        // 8088 Instruction Reference, Technical Reference,
        // IBM Personal Computer XT Hardware Refernce Library, 1983
        private static readonly Instruction[,] instructionMatrix =
        {
            { ADD, ADD, ADD, ADD, ADD, ADD, PUSH, POP, OR, None, OR, OR, OR, OR, PUSH, None },
            { ADC, ADC, ADC, ADC, ADC, ADC, PUSH, POP, SBB, SBB, SBB, SBB, SBB, SBB, PUSH, POP },
            { AND, AND, AND, AND, AND, AND, ESPrefix, DAA, SUB, SUB, SUB, SUB, SUB, SUB, CSPrefix, DAS },
            { XOR, XOR, XOR, XOR, XOR, XOR, SSPrefix, AAA, CMP, CMP, CMP, CMP, CMP, CMP, DSPrefix, AAS },
            { INC, INC, INC, INC, INC, INC, INC, INC, DEC, DEC, DEC, DEC, DEC, DEC, DEC, DEC },
            { PUSH, PUSH, PUSH, PUSH, PUSH, PUSH, PUSH, PUSH, POP, POP, POP, POP, POP, POP, POP, POP },
            { None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None },
            { JO, JNO, JB, JNB, JE, JNE, JBE, JNBE, JS, JNS, JP, JNP, JL, JNL, JLE, JNLE },
            { Immediate, Immediate, Immediate, Immediate, TEST, TEST, XCHG, XCHG, MOV, MOV, MOV, MOV, MOV, LEA, MOV, POP },
            { NOP, XCHG, XCHG, XCHG, XCHG, XCHG, XCHG, XCHG, CBW, CWD, CALL, WAIT, PUSHF, POPF, SAHF, LAHF },
            { MOV, MOV, MOV, MOV, MOVS, MOVS, CMPS, CMPS, TEST, TEST, STOS, STOS, LODS, LODS, SCAS, SCAS },
            { MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV, MOV },
            { None, None, RET, RET, LES, LDS, MOV, MOV, None, None, RET, RET, INT, INT, INTO, IRET },
            { Shift, Shift, Shift, Shift, AAM, AAD, None, XLAT, ESC, ESC, ESC, ESC, ESC, ESC, ESC, ESC },
            { LOOPNZ, LOOPZ, LOOP, JCXZ, IN, IN, OUT, OUT, CALL, JMP, JMP, JMP, IN, IN, OUT, OUT },
            { LOCK, None, REP, REP, HLT, CMC, Group1, Group1, CLC, STC, CLI, STI, CLD, STD, Group2, Group2 }
        };
        private readonly Dictionary<Instruction, Action> instructionImpls =
            new Dictionary<Instruction, Action>()
            {
                { None, HandleNone },
                { Immediate, HandleImmediate },
                { Shift, HandleShift },
                { Group1, HandleGroup1 },
                { Group2, HandleGroup2 },
                { ESPrefix, HandleESPrefix },
                { CSPrefix, HandleCSPrefix },
                { SSPrefix, HandleSSPrefix },
                { DSPrefix, HandleDSPrefix },
                { AAA, HandleAAA },
                { AAD, HandleAAD },
                { AAM, HandleAAM },
                { AAS, HandleAAS },
                { ADC, HandleADC },
                { ADD, HandleADD },
                { AND, HandleAND },
                { CALL, HandleCALL },
                { CBW, HandleCBW },
                { CLC, HandleCLC },
                { CLD, HandleCLD },
                { CLI, HandleCLI },
                { CMC, HandleCMC },
                { CMP, HandleCMP },
                { CMPS, HandleCMPS },
                { CWD, HandleCWD },
                { DAA, HandleDAA },
                { DAS, HandleDAS },
                { DEC, HandleDEC },
                { DIV, HandleDIV },
                { ESC, HandleESC },
                { HLT, HandleHLT },
                { IDIV, HandleIDIV },
                { IMUL, HandleIMUL },
                { IN, HandleIN },
                { INC, HandleINC },
                { INT, HandleINT },
                { INTO, HandleINTO },
                { IRET, HandleIRET },
                { JA, HandleJA },
                { JAE, HandleJAE },
                { JB, HandleJB },
                { JBE, HandleJBE },
                { JCXZ, HandleJCXZ },
                { JE, HandleJE },
                { JG, HandleJG },
                { JGE, HandleJGE },
                { JL, HandleJL },
                { JLE, HandleJLE },
                { JMP, HandleJMP },
                { JNA, HandleJNA },
                { JNAE, HandleJNAE },
                { JNB, HandleJNB },
                { JNBE, HandleJNBE },
                { JNE, HandleJNE },
                { JNG, HandleJNG },
                { JNGE, HandleJNGE },
                { JNL, HandleJNL },
                { JNLE, HandleJNLE },
                { JNO, HandleJNO },
                { JNP, HandleJNP },
                { JNS, HandleJNS },
                { JNZ, HandleJNZ },
                { JO, HandleJO },
                { JP, HandleJP },
                { JPE, HandleJPE },
                { JPO, HandleJPO },
                { JS, HandleJS },
                { JZ, HandleJZ },
                { LAHF, HandleLAHF },
                { LDS, HandleLDS },
                { LEA, HandleLEA },
                { LES, HandleLES },
                { LOCK, HandleLOCK },
                { LODS, HandleLODS },
                { LOOP, HandleLOOP },
                { LOOPE, HandleLOOPE },
                { LOOPNE, HandleLOOPNE },
                { LOOPNZ, HandleLOOPNZ },
                { LOOPZ, HandleLOOPZ },
                { MOV, HandleMOV },
                { MOVS, HandleMOVS },
                { MUL, HandleMUL },
                { NEG, HandleNEG },
                { NOP, HandleNOP },
                { NOT, HandleNOT },
                { OR, HandleOR },
                { OUT, HandleOUT },
                { POP, HandlePOP },
                { POPF, HandlePOPF },
                { PUSH, HandlePUSH },
                { PUSHF, HandlePUSHF },
                { RCL, HandleRCL },
                { RCR, HandleRCR },
                { REP, HandleREP },
                { RET, HandleRET },
                { ROL, HandleROL },
                { ROR, HandleROR },
                { SAHF, HandleSAHF },
                { SAL, HandleSAL },
                { SAR, HandleSAR },
                { SBB, HandleSBB },
                { SCAS, HandleSCAS },
                { SHL, HandleSHL },
                { SHR, HandleSHR },
                { STC, HandleSTC },
                { STD, HandleSTD },
                { STI, HandleSTI },
                { STOS, HandleSTOS },
                { SUB, HandleSUB },
                { TEST, HandleTEST },
                { WAIT, HandleWAIT },
                { XCHG, HandleXCHG },
                { XLAT, HandleXLAT },
                { XOR, HandleXOR },
            };
    }
}